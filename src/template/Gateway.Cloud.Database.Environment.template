{
    "Description": "This template creates an Example Database environment",
    "Parameters": {
        "ShutdownOutsideBusinessHours": {
            "Description":"This parameter can be used to set up anything that needs to automatically stop outside business hours. Mostly its used outside this template to determine the appropriate tags to apply to the Stack.",
            "Type":"String"
        },
        "ComponentName": {
            "Description": "The name of the component that this stack makes up. This is already part of the stack name, but is here so it can be used for naming/tagging purposes.",
            "Type": "String"
        },
        "CurrentEnvironmentStatus": {
            "Description": "The current status of the environment, used to determine the appropriate action to take when deploying Octopus packages (along with other parameters).",
            "Type": "String"
        },
        "AdminPassword": {
            "Description": "Password for the Administrator user account on any instances in this template",
            "Type": "String"
        },
        "DependenciesS3Bucket": {
            "Description": "The name of the bucket that the dependencies archive is inside.",
            "Type": "String"
        },
        "DependenciesS3BucketAccessKey" : {
            "Description" : "The Access Key for a user who is able to access the S3 location containing the dependencies archive.",
            "Type" : "String",
            "NoEcho": "true"
        },
        "DependenciesS3BucketSecretKey" : {
            "Description" : "The Secret Key for a user who is able to access the S3 location containing the dependencies archive.",
            "Type" : "String",
            "NoEcho": "true"
        },
        "DependenciesArchiveS3Url": {
            "Description": "The URL to the dependencies archive required by the various elements in the stack. This archive contains various elements from the source tree at the time the script was executed.",
            "Type": "String"
        },
        "ProxyUrlAndPort": {
            "Description": "The fully qualified URL with port for the internet proxy that any component needs to use in order to access the greater internet.",
            "Type": "String"
        },
        "OctopusEnvironment": {
            "Description": "Octopus Environment",
            "Type": "String"
        },
        "OctopusServerURL": {
            "Description": "Octopus Server URL",
            "Type": "String"
        },
        "OctopusAPIKey": {
            "Description": "Octopus API Key",
            "Type": "String",
            "NoEcho": "true"
        },
        "OctopusAmiId": {
            "Description": "The AMI to be used for most instances that need to have things deployed to them via Octopus.",
            "Type": "String"
        },
        "OctopusServerCidrForSecurityGroup": {
            "Type": "String",
            "Default": "172.31.0.0/23",
            "Description": "The CIDR describing the IP address of the Octopus Server, used for security groups."
        },
        "OctopusMachineCorrelationId": {
            "Type":"String",
            "Description":"A unique identifier (suggest GUID) to correlate all Octopus machines involved in this instance of the environment."
        },
        "DotNetWebServerAmiId": {
            "Description": "The AMI to be used for any .NET web servers. It has IIS, ASP.NET and Octopus pre-installed.",
            "Type": "String"
        },
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Default": "vpc-a0a6aec9",
            "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
            "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
        },
        "PrivateSubnets": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Default": "subnet-b1299cd4,subnet-c2f220b5",
            "Description": "Private subnets spread across availability zones, intended to contain all components that should not be public (log processors, API instances, databases, etc). Most stuff should be here.",
            "ConstraintDescription": "must be a list of an existing subnets in the selected Virtual Private Cloud."
        },
        "PublicSubnets": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Default": "subnet-da299cbf,subnet-d2f220a5",
            "Description": "Public subnets (i.e. ones that are automatically assigned public IP addresses) spread across availability zones, intended to contain load balancers and other externally accessible components.",
            "ConstraintDescription": "must be a list of an existing subnets in the selected Virtual Private Cloud."
        },
        "Ec2AutomationEnablingSecurityGroup": {
            "Type":"AWS::EC2::SecurityGroup::Id",
            "Default":"sg-0b65076e",
            "Description":"A security group that describes a set of access rules for resources that need automated access (like EC2 machines). This is mostly used to allow the initialization script to remote onto machines and get error logs."
        },
        "OperatorEMail": {
            "Description": "Email address to notify if there are any scaling operations",
            "Type": "String",
            "Default": "notifications@solavirum.com",
            "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
            "ConstraintDescription": "must be a valid email address."
        },
        "KeyName": {
            "Description": "The EC2 Key Pair to allow RDP access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "default_keypair",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "team": {
            "Description": "The name of the team that this stack belongs to",
            "Type": "String"
        },
        "InternalServicesHostRoot" : {
            "Type": "String",
            "Description": "The root of the host used for internal services (like the proxy, which is also supplied separately in a different parameter)."
        },
        "EnvironmentType" : {
            "Type": "String",
            "Description": "This value will be used to directly look up things like instance types and will be used to derive a production specific condition for determining things that can't be solved via a mapping."
        },
        "EnvironmentVersion" : {
            "Type": "String",
            "Description": "The version of the environment. This is used for backwards traceability to the tag in the repository the environment was created from"
        },


        "SslCertificateId": {
            "Description": "The ID of the SSL certificate to be used by the public facing load balancer. Certificate is available inside the AWS account under this specified name.",
            "Type": "String",
            "Default": "star_solavirum_com"
        },
        "HostedZone": {
            "Description": "The name of a Hosted Zone in AWS Route 53 to use as the root for any generated URLs",
            "Type": "String",
            "Default": "examples.solavirum.com"
        },
        
        "PrivateASubnetCidr": {
            "Description": "The CIDR (i.e. IP address range) that will be used to determine which IP addresses can access the Cloud Database. This one represents the CIDR of the Private Web A subnet.",
            "Type": "String",
            "Default": "10.250.38.0/24"
        },
        "PrivateBSubnetCidr": {
            "Description": "The CIDR (i.e. IP address range) that will be used to determine which IP addresses can access the Cloud Database. This one represents the CIDR of the Private Web B subnet.",
            "Type": "String",
            "Default": "10.250.39.0/24"
        },
        "OpsSubnetCidr": {
            "Description": "The CIDR (i.e. IP address range) that will be used to determine which IP addresses can access the Cloud Database. This one represents the CIDR of the Private Web B subnet.",
            "Type": "String",
            "Default": "10.250.44.0/24"
        },
        "RdsDatabaseMasterUsername": {
            "Description" : "The username for the master user on the RDS instance. This username has been entered into Octopus for deployment purposes, think before you change it.",
            "Type": "String",
            "Default": "master"
        },
        "RdsDatabaseMasterUsernamePassword": {
            "Description" : "The password for the master user on the RDS instance. This password has been entered into Octopus for deployment purposes, think before you change it.",
            "Type": "String"
        },
        "RdsDatabasePort": {
            "Description" : "The port for the RDS instance. This port has been entered into Octopus for deployment purposes, think before you change it.",
            "Type": "String",
            "Default":"5433"
        },
        "MaximumTimeToWaitForResource": {
            "Description": "How long (in seconds) to wait for resources to complete their setup.",
            "Type": "String",
            "Default": "3000"
        }
    },
    "Resources": {
        "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": { "Ref": "OperatorEMail" },
                        "Protocol": "email"
                    }
                ]
            }
        },
        "MasterRDSSubnetGroup" : {
            "Type" : "AWS::RDS::DBSubnetGroup",                          
            "Properties" : {               
                "DBSubnetGroupDescription" : "RDS Subnet Group",
                "SubnetIds" : { "Ref": "PrivateSubnets" }  
            }
        },      
        "MasterRDSSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription": "Open database for access",
                "VpcId" : {"Ref" : "VpcId"},
                "SecurityGroupIngress" : 
                [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": { "Ref" : "RdsDatabasePort" },
                        "ToPort": { "Ref" : "RdsDatabasePort" },
                        "CidrIp": { "Ref": "PrivateASubnetCidr" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": { "Ref" : "RdsDatabasePort" },
                        "ToPort": { "Ref" : "RdsDatabasePort" },
                        "CidrIp": { "Ref": "PrivateBSubnetCidr" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": { "Ref" : "RdsDatabasePort" },
                        "ToPort": { "Ref" : "RdsDatabasePort" },
                        "CidrIp": { "Ref": "OpsSubnetCidr" }
                    }
                ]
            }
        },
        "MasterRDS" : {
            "Type" : "AWS::RDS::DBInstance",
            "Properties" : {
                "DBInstanceIdentifier" : { "Fn::Join": [ "", [ { "Ref" : "team" }, "-", { "Ref" : "OctopusEnvironment" }, "-", { "Ref" : "ComponentName" } ] ] },
                "AllocatedStorage" :  "5",
                "DBInstanceClass" : "db.t2.micro",
                "StorageType" : "gp2",
                "Engine" : "postgres",
                "EngineVersion" : "9.4.1",
                "MasterUsername" :  { "Ref" : "RdsDatabaseMasterUsername" } ,
                "MasterUserPassword" :  { "Ref" : "RdsDatabaseMasterUsernamePassword" },
                "VPCSecurityGroups": [{ "Ref": "MasterRDSSecurityGroup" }],
                "DBSubnetGroupName" : { "Ref" : "MasterRDSSubnetGroup" },
                "Port" : { "Ref" : "RdsDatabasePort" },
                "AllowMajorVersionUpgrade" : false,
                "AutoMinorVersionUpgrade" : true,
                "BackupRetentionPeriod" : "7",
                "MultiAZ" : true,
                "Tags" : [ { "Key" : "CurrentEnvironmentStatus", "Value" : { "Ref": "CurrentEnvironmentStatus" } } ]
            }
        },
        "MasterRDSHostRecord" : {
             "Type" : "AWS::Route53::RecordSet",
             "Properties" : {
                "HostedZoneName": { "Fn::Join": [ "", [ { "Ref": "HostedZone" }, "." ] ] },
                 "Comment" : "DNS name for RDS instance.",
                 "Name": { "Fn::Join": [ "", [ "internal-", { "Ref": "OctopusEnvironment" }, "-cloud-database.", { "Ref": "HostedZone" } ] ] },
                 "Type" : "CNAME",
                 "TTL" : "900",
                 "ResourceRecords" : [
                     { "Fn::GetAtt" : [ "MasterRDS", "Endpoint.Address" ] }
                 ]
             }
        }
    },
	"Outputs" : {
		"MasterDatabaseEndpointWithPort" : {
			"Description" : "The endpoint of the master database. Includes the port, deliniated by a comma (,)",
			"Value" : { "Fn::Join" : ["", [ { "Ref" : "MasterRDSHostRecord" }, ",", { "Ref" : "RdsDatabasePort" }  ] ] }
		}
    }
}
